import tkinter as tk
from tkinter import ttk, messagebox
import re

class LL1Parser:
    def __init__(self, grammar):
        self.grammar = grammar
        self.first = {}
        self.follow = {}
        self.parsing_table = {}
        self.start_symbol = grammar[0][0]
        self.calculate_first()
        self.calculate_follow()
        self.generate_parsing_table()

    def calculate_first(self):
        def first(symbol):
            if not symbol.isupper():  # Terminal symbol
                return {symbol}
            if symbol not in self.first:
                self.first[symbol] = set()
                for lhs, rhs in [p for p in self.grammar if p[0] == symbol]:
                    for sym in rhs.split():
                        sym_first = first(sym)
                        self.first[symbol].update(sym_first - {'$'})
                        if '$' not in sym_first:
                            break
                    else:
                        self.first[symbol].add('$')
            return self.first[symbol]

        for lhs, _ in self.grammar:
            first(lhs)

    def calculate_follow(self):
        self.follow[self.start_symbol] = {'$'}
        
        def follow(symbol):
            if symbol not in self.follow:
                self.follow[symbol] = set()
            for lhs, rhs in self.grammar:
                rhs_tokens = rhs.split()
                for i, sym in enumerate(rhs_tokens):
                    if sym == symbol:
                        if i + 1 < len(rhs_tokens):
                            next_symbol = rhs_tokens[i + 1]
                            next_first = self.first[next_symbol] if next_symbol.isupper() else {next_symbol}
                            self.follow[symbol].update(next_first - {'$'})
                            if '$' in next_first:
                                self.follow[symbol].update(self.follow[lhs])
                        else:
                            self.follow[symbol].update(self.follow[lhs])
            return self.follow[symbol]

        for lhs, rhs in self.grammar:
            for sym in rhs.split():
                if sym.isupper():
                    follow(sym)

    def generate_parsing_table(self):
        for lhs, rhs in self.grammar:
            rhs_tokens = rhs.split()
            first_set = self.first[rhs_tokens[0]] if rhs_tokens[0].isupper() else {rhs_tokens[0]}
            for terminal in first_set:
                if terminal != '$':
                    self.parsing_table.setdefault(lhs, {})[terminal] = rhs
            if '$' in first_set:
                for terminal in self.follow[lhs]:
                    self.parsing_table.setdefault(lhs, {})[terminal] = '$'

    def get_first(self):
        return {k: sorted(v) for k, v in self.first.items()}

    def get_follow(self):
        return {k: sorted(v) for k, v in self.follow.items()}

    def get_parsing_table(self):
        return self.parsing_table

    def parse_string(self, input_string):
        input_string = re.sub(r'\s+', '', input_string) + "$"
        tokens = re.findall(r'\(|\)|\+|\*|id|\$|[a-z]', input_string)  
        stack = ["$", self.start_symbol]
        buffer = tokens
        steps = []

        while stack:
            top = stack.pop()
            current = buffer[0]

            if top == current == "$":
                steps.append((list(stack), list(buffer), "Accepted"))
                break

            elif top == current:
                steps.append((list(stack), list(buffer), f"Matched: {current}"))
                buffer.pop(0)

            elif top in self.parsing_table and current in self.parsing_table[top]:
                rule = self.parsing_table[top][current].split()
                steps.append((list(stack), list(buffer), f"Apply: {top} -> {self.parsing_table[top][current]}"))
                if rule != ["$"]:
                    stack.extend(reversed(rule))

            else:
                steps.append((list(stack), list(buffer), "Error"))
                break

        return steps


class LL1ParserGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("LL(1) Parser with Stack Visualization")

        # Grammar input section
        tk.Label(root, text="Enter Grammar (e.g., E -> E + T | T):").pack()
        self.grammar_input = tk.Text(root, height=3, width=40)
        self.grammar_input.pack(pady=5)

        # String input section
        tk.Label(root, text="Enter String to Parse:").pack()
        self.string_input = tk.Entry(root, width=40)
        self.string_input.pack(pady=5)

        # Button to calculate FIRST, FOLLOW, parsing table
        self.calculate_button = tk.Button(root, text="Calculate", command=self.calculate)
        self.calculate_button.pack(pady=5)

        # Display FIRST and FOLLOW
        self.first_follow_text = tk.Text(root, height=4, width=60)
        self.first_follow_text.pack(pady=5)

        # Parsing Table section
        tk.Label(root, text="Parsing Table:").pack()
        self.tree = ttk.Treeview(root, show="headings", height=8)
        self.tree.pack(fill=tk.BOTH, expand=True, pady=5)

        # Stack Visualization
        tk.Label(root, text="Parsing Steps and Stack:").pack()
        self.stack_view = ttk.Treeview(root, columns=["Stack", "Buffer", "Action"], show="headings", height=8)
        self.stack_view.heading("Stack", text="Stack")
        self.stack_view.heading("Buffer", text="Buffer")
        self.stack_view.heading("Action", text="Action")
        self.stack_view.pack(fill=tk.BOTH, expand=True, pady=5)

    def calculate(self):
        grammar_input = self.grammar_input.get("1.0", tk.END).strip()
        input_string = self.string_input.get().strip()

        grammar = [line.split("->") for line in grammar_input.splitlines() if line]
        grammar = [(lhs.strip(), rhs.strip().replace('|', ' | ').replace(' ', ' ')) for lhs, rhs in grammar]

        parser = LL1Parser(grammar)
        first = parser.get_first()
        follow = parser.get_follow()
        parsing_table = parser.get_parsing_table()

        # Display FIRST and FOLLOW
        self.first_follow_text.delete("1.0", tk.END)
        self.first_follow_text.insert(tk.END, f"FIRST: {first}\nFOLLOW: {follow}\n")

        # Parsing table configuration
        self.tree.delete(*self.tree.get_children())
        terminals = sorted(set(term for row in parsing_table.values() for term in row).union({'$'}))
        self.tree["columns"] = ["LHS"] + terminals
        for col in self.tree["columns"]:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=80, anchor="center")

        for non_terminal, rules in parsing_table.items():
            row = [rules.get(term, "") for term in terminals]
            self.tree.insert("", "end", values=[non_terminal] + row)

        # Parse string and visualize stack
        self.stack_view.delete(*self.stack_view.get_children())
        steps = parser.parse_string(input_string)
        for stack, buffer, action in steps:
            self.stack_view.insert("", "end", values=(" ".join(stack), " ".join(buffer), action))


if __name__ == "__main__":
    root = tk.Tk()
    app = LL1ParserGUI(root)
    root.mainloop()
